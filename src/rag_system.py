import os
from typing import List, Dict, Optional
from search_engine import GeologicalSearchEngine
import config

try:
    import openai
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install openai")
    raise

class GeologicalRAGSystem:
    """RAG —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
    
    def __init__(self, openai_api_key: str = None):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
        if openai_api_key is None:
            openai_api_key = config.OPENAI_API_KEY
        
        if not openai_api_key or openai_api_key == "your_api_key_here":
            raise ValueError(
                "OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! "
                "–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ .env —Ñ–∞–π–ª: OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á"
            )
        
        # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        try:
            self.client = openai.OpenAI(api_key=openai_api_key)
        except Exception as e:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            try:
                openai.api_key = openai_api_key
                self.client = openai
                self.use_legacy_api = True
            except Exception as e2:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
        else:
            self.use_legacy_api = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.search_engine = GeologicalSearchEngine()
        
        print("RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    def create_context_from_chunks(self, chunks: List[Dict], max_tokens: int = 6000) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        context_parts = []
        current_length = 0
        
        for i, chunk in enumerate(chunks, 1):
            chunk_text = f"\n--- –î–æ–∫—É–º–µ–Ω—Ç {chunk['filename']}, —Ñ—Ä–∞–≥–º–µ–Ω—Ç {chunk['chunk_index']} ---\n{chunk['text']}\n"
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Ç–æ–∫–µ–Ω = 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)
            estimated_tokens = len(chunk_text) // 4
            
            if current_length + estimated_tokens > max_tokens:
                break
            
            context_parts.append(chunk_text)
            current_length += estimated_tokens
        
        return "\n".join(context_parts)
    
    def create_system_prompt(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI"""
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–≥–µ–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
2. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
3. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º
4. –£–∫–∞–∑–∞—Ç—å, –∏–∑ –∫–∞–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å —Ç–æ—á–µ–Ω –∏ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω
- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
    
    def ask_question(self, question: str, max_chunks: int = 5, 
                    min_similarity: float = 0.01) -> Dict:
        """
        –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∏—Å—Ç–µ–º–µ RAG
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_chunks: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            min_similarity: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —á–∞–Ω–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            # 1. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            search_results = self.search_engine.search(
                question, 
                top_k=max_chunks, 
                min_similarity=min_similarity
            )
            
            if not search_results:
                return {
                    "question": question,
                    "answer": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
                    "sources": [],
                    "confidence": "–Ω–∏–∑–∫–∞—è",
                    "error": None
                }
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = self.create_context_from_chunks(search_results)
            
            # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            user_prompt = f"""
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
{context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏, –∏–∑ –∫–∞–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
"""
            
            # 4. –ó–∞–ø—Ä–æ—Å –∫ OpenAI
            try:
                if hasattr(self, 'use_legacy_api') and self.use_legacy_api:
                    # –°—Ç–∞—Ä—ã–π API
                    response = self.client.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": self.create_system_prompt()},
                            {"role": "user", "content": user_prompt}
                        ],
                        max_tokens=1500,
                        temperature=0.3
                    )
                    answer = response.choices[0].message.content.strip()
                else:
                    # –ù–æ–≤—ã–π API
                    response = self.client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": self.create_system_prompt()},
                            {"role": "user", "content": user_prompt}
                        ],
                        max_tokens=1500,
                        temperature=0.3
                    )
                    answer = response.choices[0].message.content.strip()
            except Exception as api_error:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API: {api_error}")
            
            # 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            sources = []
            for chunk in search_results:
                sources.append({
                    "filename": chunk["filename"],
                    "chunk_id": chunk["chunk_id"],
                    "similarity": round(chunk["similarity"], 3)
                })
            
            # –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            avg_similarity = sum(chunk["similarity"] for chunk in search_results) / len(search_results)
            if avg_similarity > 0.3:
                confidence = "–≤—ã—Å–æ–∫–∞—è"
            elif avg_similarity > 0.1:
                confidence = "—Å—Ä–µ–¥–Ω—è—è"
            else:
                confidence = "–Ω–∏–∑–∫–∞—è"
            
            return {
                "question": question,
                "answer": answer,
                "sources": sources,
                "confidence": confidence,
                "chunks_used": len(search_results),
                "error": None
            }
            
        except Exception as e:
            return {
                "question": question,
                "answer": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}",
                "sources": [],
                "confidence": "–æ—à–∏–±–∫–∞",
                "error": str(e)
            }
    
    def interactive_session(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤"""
        print("\n=== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –°–ï–°–°–ò–Ø –ì–ï–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –ó–ê–ü–†–û–°–û–í ===")
        print("–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.")
        print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥', 'exit' –∏–ª–∏ 'quit'\n")
        
        while True:
            try:
                question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                if question.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if not question:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
                    continue
                
                print("\nüîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...")
                
                result = self.ask_question(question)
                
                print(f"\nüìã –û—Ç–≤–µ—Ç:")
                print("=" * 50)
                print(result["answer"])
                print("=" * 50)
                
                if result["sources"]:
                    print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}):")
                    for i, source in enumerate(result["sources"], 1):
                        print(f"{i}. {source['filename']} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {source['similarity']})")
                
                if result["error"]:
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['error']}")
                    
            except KeyboardInterrupt:
                print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"\n–û—à–∏–±–∫–∞: {e}")

def test_rag_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = config.OPENAI_API_KEY
        if not api_key or api_key == "your_api_key_here":
            print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
            print("1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –Ω–∞ https://platform.openai.com/")
            print("2. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ñ–∞–π–ª .env:")
            print("   OPENAI_API_KEY=your_actual_api_key")
            return None
        
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
        rag = GeologicalRAGSystem()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = [
            "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ –ë–æ—Ä–∏—Å–æ–≤—Å–∫–æ–º –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–∏?",
            "–ö–∞–∫–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∏—Å–∫–æ–ø–∞–µ–º—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö?",
            "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç—ã?",
            "–ì–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ?",
            "–ö—Ç–æ –±—ã–ª –≥–ª–∞–≤–Ω—ã–º –≥–µ–æ–ª–æ–≥–æ–º –ø—Ä–æ–µ–∫—Ç–∞?"
        ]
        
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –°–ò–°–¢–ï–ú–´ ===\n")
        
        for question in test_questions:
            print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question}")
            print("-" * 60)
            
            result = rag.ask_question(question)
            
            print(f"üí¨ –û—Ç–≤–µ—Ç: {result['answer']}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            
            if result["sources"]:
                print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join([s['filename'] for s in result['sources']])}")
        
        return rag
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
        return None

if __name__ == "__main__":
    rag_system = test_rag_system()
    if rag_system:
        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        rag_system.interactive_session()