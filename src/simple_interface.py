#!/usr/bin/env python3
import sys
import os
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from search_engine import GeologicalSearchEngine
from rag_system import GeologicalRAGSystem
import config

class GeologicalInterface:
    """–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.search_engine = None
        self.rag_system = None
        self.mode = "search"  # "search" –∏–ª–∏ "rag"
        
        self.initialize_systems()
    
    def initialize_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –ø–æ–∏—Å–∫–∞ –∏ RAG"""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            self.search_engine = GeologicalSearchEngine()
            print("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã
            try:
                api_key = config.OPENAI_API_KEY
                if api_key and api_key != "your_api_key_here":
                    self.rag_system = GeologicalRAGSystem()
                    print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
                else:
                    print("‚ö†Ô∏è  RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OpenAI API –∫–ª—é—á)")
                    print("   –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è  RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                print("   –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "="*60)
        print("üèîÔ∏è  –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ì–ï–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í")
        print("="*60)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
        print("1. üîç –ü–æ–∏—Å–∫ - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
        if self.rag_system:
            print("2. ü§ñ RAG - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –ò–ò")
        print("3. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("4. ‚ùì –ü–æ–º–æ—â—å - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("5. üö™ –í—ã—Ö–æ–¥")
        print("-"*60)
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("\nüìñ –°–ü–†–ê–í–ö–ê –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        print("="*50)
        print("üîç –†–ï–ñ–ò–ú –ü–û–ò–°–ö–ê:")
        print("- –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        print("- –ü—Ä–∏–º–µ—Ä—ã: '–º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ', '–ø–µ—Å–æ–∫ –≥—Ä–∞–≤–∏–π', '–ë–æ—Ä–∏—Å–æ–≤–æ'")
        print("- –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if self.rag_system:
            print("\nü§ñ –†–ï–ñ–ò–ú RAG (–ò–ò):")
            print("- –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ")
            print("- –ü—Ä–∏–º–µ—Ä—ã: '–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ –ë–æ—Ä–∏—Å–æ–≤—Å–∫–æ–º –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–∏?'")
            print("- –ò–ò –¥–∞—Å—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        print("\nüí° –°–û–í–ï–¢–´:")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—Å—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã")
        print("- –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        print("- –í —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –∏–º–µ–Ω–∞–º, –¥–∞—Ç–∞–º, –º–µ—Å—Ç–∞–º")
        print("\n")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            index_data = self.search_engine.index_data
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("="*40)
            print(f"–í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {index_data['total_chunks']}")
            print(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤: {index_data['embedding_dim']}")
            print(f"–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {index_data['model_name']}")
            
            # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            unique_files = set()
            for chunk in index_data['chunks']:
                unique_files.add(chunk['filename'])
            
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(unique_files)}")
            print(f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(sorted(unique_files))}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def search_mode(self):
        """–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞"""
        print("\nüîç –†–ï–ñ–ò–ú –ü–û–ò–°–ö–ê")
        print("–í–≤–µ–¥–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("-"*40)
        
        while True:
            try:
                query = input("\nüîé –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
                
                if query.lower() in ['–Ω–∞–∑–∞–¥', 'back', 'exit']:
                    break
                
                if not query:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
                    continue
                
                print(f"\nüîç –ò—â—É: '{query}'...")
                
                results = self.search_engine.search_with_details(query, top_k=5)
                
                if not results['results']:
                    print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    continue
                
                print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ: {results['total_results']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                print(f"üìÅ –§–∞–π–ª–æ–≤: {results['stats']['files_count']}")
                print("-"*50)
                
                for i, result in enumerate(results['results'], 1):
                    print(f"\n{i}. üìÑ {result['filename']}")
                    print(f"   üéØ –°—Ö–æ–¥—Å—Ç–≤–æ: {result['similarity']:.3f}")
                    print(f"   üìù –¢–µ–∫—Å—Ç: {result['text'][:300]}{'...' if len(result['text']) > 300 else ''}")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def rag_mode(self):
        """–†–µ–∂–∏–º RAG (–≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã —Å –ò–ò)"""
        if not self.rag_system:
            print("‚ùå RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        print("\nü§ñ –†–ï–ñ–ò–ú RAG (–í–û–ü–†–û–°–´-–û–¢–í–ï–¢–´)")
        print("–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ")
        print("–í–≤–µ–¥–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("-"*50)
        
        while True:
            try:
                question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                if question.lower() in ['–Ω–∞–∑–∞–¥', 'back', 'exit']:
                    break
                
                if not question:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
                    continue
                
                print("\nü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å...")
                
                result = self.rag_system.ask_question(question)
                
                print("\n" + "="*60)
                print("ü§ñ –û–¢–í–ï–¢:")
                print("="*60)
                print(result['answer'])
                print("="*60)
                
                if result['sources']:
                    print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}):")
                    for i, source in enumerate(result['sources'], 1):
                        print(f"{i}. {source['filename']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['similarity']:.3f})")
                
                if result['error']:
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['error']}")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        while True:
            try:
                self.show_main_menu()
                
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-5): ").strip()
                
                if choice == '1':
                    self.search_mode()
                elif choice == '2' and self.rag_system:
                    self.rag_mode()
                elif choice == '2' and not self.rag_system:
                    print("‚ùå RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                elif choice == '3':
                    self.show_statistics()
                elif choice == '4':
                    self.show_help()
                elif choice == '5':
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
                if choice in ['3', '4']:
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    try:
        interface = GeologicalInterface()
        interface.run()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()