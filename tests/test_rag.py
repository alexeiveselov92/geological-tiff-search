#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

import config
from rag_system import GeologicalRAGSystem

def check_openai_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI API –∫–ª—é—á–∞"""
    api_key = config.OPENAI_API_KEY
    if not api_key or api_key == "your_api_key_here":
        print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        print("1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –Ω–∞ https://platform.openai.com/")
        print("2. –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("   OPENAI_API_KEY=your_actual_api_key")
        return False
    
    print(f"‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    return True

def test_rag_basic():
    """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã"""
    print("=== –ë–ê–ó–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG ===\n")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
        rag = GeologicalRAGSystem()
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = [
            "–º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ",
            "–ë–æ—Ä–∏—Å–æ–≤–æ", 
            "–ø–µ—Å–æ–∫ –∏ –≥—Ä–∞–≤–∏–π"
        ]
        
        for question in test_questions:
            print(f"‚ùì –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: '{question}'")
            print("-" * 50)
            
            result = rag.ask_question(question, max_chunks=3)
            
            print(f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(result['answer'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(result['sources'])}")
            
            if result["error"]:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['error']}")
                return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
            answer_preview = result['answer'][:200] + "..." if len(result['answer']) > 200 else result['answer']
            print(f"üî§ –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {answer_preview}")
            
            print("="*60 + "\n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_rag_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã"""
    print("=== –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG ===\n")
    
    try:
        rag = GeologicalRAGSystem()
        
        # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        detailed_questions = [
            "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ –ë–æ—Ä–∏—Å–æ–≤—Å–∫–æ–º –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–∏ –ø–µ—Å–∫–∞ –∏ –≥—Ä–∞–≤–∏—è?",
            "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã?",
            "–ö—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –ø—Ä–æ–µ–∫—Ç –≤ —Ä–∞–π–æ–Ω–µ —Ä–µ–∫–∏ –ü—Ä–æ—Ç–≤—ã?"
        ]
        
        for question in detailed_questions:
            print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            print("="*70)
            
            result = rag.ask_question(question, max_chunks=5, min_similarity=0.01)
            
            print(f"üí¨ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print(result['answer'])
            
            print(f"\nüìä –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            print(f"   –ß–∞–Ω–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result.get('chunks_used', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if result["sources"]:
                print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                for i, source in enumerate(result["sources"], 1):
                    print(f"   {i}. {source['filename']} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {source['similarity']})")
            
            if result["error"]:
                print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['error']}")
                return False
            
            print("\n" + "="*80 + "\n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í ===\n")
    
    try:
        rag = GeologicalRAGSystem()
        
        edge_cases = [
            "",  # –ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
            "–∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ",  # –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            "—á—Ç–æ" * 100,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        ]
        
        for i, question in enumerate(edge_cases, 1):
            question_desc = f"–≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π {i}"
            if question == "":
                question_desc = "–ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å"
            elif "–∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞" in question:
                question_desc = "–Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
            elif len(question) > 50:
                question_desc = "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
            
            print(f"üß™ –¢–µ—Å—Ç: {question_desc}")
            print("-" * 40)
            
            if question == "":
                print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å")
                continue
            
            result = rag.ask_question(question, max_chunks=2, min_similarity=0.1)
            
            print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(result['answer'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(result['sources'])}")
            
            if result["error"]:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {result['error']}")
            
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
        return False

def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("=== –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===\n")
    
    try:
        import time
        
        rag = GeologicalRAGSystem()
        
        question = "–º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Å–æ–∫ –≥—Ä–∞–≤–∏–π"
        num_requests = 3
        
        print(f"üöÄ –í—ã–ø–æ–ª–Ω—è—é {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        times = []
        for i in range(num_requests):
            start_time = time.time()
            result = rag.ask_question(question, max_chunks=3)
            end_time = time.time()
            
            request_time = end_time - start_time
            times.append(request_time)
            
            print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: {request_time:.2f} —Å–µ–∫")
            
            if result["error"]:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['error']}")
                return False
        
        avg_time = sum(times) / len(times)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {avg_time:.2f} —Å–µ–∫")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min(times):.2f} —Å–µ–∫") 
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max(times):.2f} —Å–µ–∫")
        
        if avg_time < 10:
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è")
        elif avg_time < 20:
            print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è")
        else:
            print("‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

if __name__ == "__main__":
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –°–ò–°–¢–ï–ú–´")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not check_openai_key():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ API –∫–ª—é—á–∞")
        sys.exit(1)
    
    print()
    
    # –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if test_rag_basic():
        print("‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ\n")
    else:
        print("‚ùå –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ")
        sys.exit(1)
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ  
    if test_rag_detailed():
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ\n")
    else:
        print("‚ùå –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if test_edge_cases():
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ\n")
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ –ø—Ä–æ—à–ª–æ")
        sys.exit(1)
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if performance_test():
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ\n")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
        sys.exit(1)
    
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("\n" + "="*50)
    print("RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("–î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("python src/rag_system.py")